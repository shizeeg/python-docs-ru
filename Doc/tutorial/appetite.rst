.. _tut-intro:

**********************
Разжигая ваш аппетит
**********************

Если вы много работаете за компьютером, в конечном итоге, вы обнаружите, что
есть какая-то задача, которую вы хотели бы автоматизировать. Например, вы
можете захотеть выполнить поиск и замену большого количества файлов или
переименовать и рассортировать кучу фотографий каким-то особенным способом.
Может быть, вы хотели бы написать небольшую собственную базу данных или
специфическое графическое приложение, или может простую игру.

Если вы профессиональный разработчик программного обеспечения, вам, возможно,
приходится работать с несколькими C/C++/Java библиотеками, но находите обычный
цикл написания/компиляции/тестирования/повторной компиляции слишком медленным.
Может быть, вы пишете набор тестов для такой библиотеки и находите написание
проверки кода очень утомительным занятием. Или, может, вы написали программу,
которая обладает языком для написания расширений и вы не хотите изобретать и
реализовывать новый язык для этих целей.

Python --- язык для вас.

Вы могли бы написать скрипт для оболочки командной строки Unix или пакетные
файлы Windows, для некоторых из этих задач, но сценарии оболочки лучше подходят
для перемещения файлов туда-сюда и обработки текстовых данных и не очень хорошо
подходят для приложений с графическим интерфейсом или игр. Вы могли бы написать
программу на C/C++/Java, но это может занять много времени даже чтобы получить
начальный прототип программы. Python проще в использовании, доступен на
Windows, Mac OS X и Unix, он поможет вам выполнить работу быстрее.

Python прост в использовании, но это настоящий язык программирования,
предоставляющий гораздо лучшую структуру и поддержку для написания больших
программ, чем сценарии командной строки или командные файлы Windows. С другой
стороны, Python также предлагает гораздо больше контроля над ошибками, чем С, и
будучи языком *чень высокого уровня* он имеет встроенные типы данных
высокого уровня, такие как гибкие массивы и словари. Благодаря более
универсальным типам данных, Python применим для более широкой области задач,
чем AWK или даже Perl, к тому же, многие вещи на Python так же просты, если
даже не проще, чем на этих языках.

Python позволяет вам разделять вашу программу на модули, которые могут быть
повторно использованы в других программах на Python. Он поставляется с большой
коллекцией стандартных модулей, которые можно использовать в качестве основы
для ваших программ --- или в качестве примеров, чтобы начать учиться
программировать на Python. Некоторые из этих модулей предоставляют такие
инструменты, как файловый ввод/вывод, системные вызовы, сокеты, и даже API для
библиотек графического интерфейса пользователя, таких как Tk.

Python является интерпретируемым языком, поэтому может сэкономить вам много
времени в процессе разработки программы, потому что компиляция и компоновка не
требуются. Интерпретатор может использоваться в интерактивном режиме, что
позволяет легко экспериментировать с особенностями языка, чтобы писать наброски
или для проверки функций во время разработки программ "снизу вверх". Это также
удобный, настольный калькулятор.

Программы на Python компактны и их легко читать. Программы, написанные на Python,
как правило, гораздо меньше, чем аналогичные на C, C++ или Java, по нескольким
причинам:

* типы данных высокого уровня позволят вам выражать сложные операции одним
  выражением;

* группировка выражений осуществляется отступами, а не скобками в начале и
  конце;

* переменные и аргументы объявлять не требуется.

Python *расширяем*: если вы знаете, как программировать на Си можно
легко добавить новые встроенные функции или модуль для интерпретатора, либо
провести критические операции на максимальной скорости или сл нковать программы
на Python с библиотеками, которые могут быть доступны только в двоичной форме
(например, графическая библиотека конкретного производителя). После того, как
вас действительно зацепит, вы можете встроить интерпретатор Python в
приложение, написанное на Си и использовать его в качестве расширения или
командного языка для этого приложения.

Кстати, язык назван в честь шоу на BBC "Летающий цирк Монти
Пайтона" (Monty Python's Flying Circus) и не имеет ничего общего с
рептилиями. Упоминание пародий Монти Пайтона в документации не только
разрешается, но и поощряется!

Теперь, когда вы все воодушевились Python'ом, вы захотите изучить его
более подробно. Т.к. лучший способ выучить язык, это использовать его, данный
учебник приглашает вас поиграть с интерпретатором Python во время чтения.

В следующей главе, механика использования интерпретатора поясняется. Это
довольно очевидная информация, но необходимая для опробования примеров,
приведённых далее.

Остальная часть учебника знакомит с различными функциями языка Python на
примерах, начиная с простых выражений, операторов и типов данных, проходит по
функциям и модулям, и, наконец касается передовых концепций, таких как
исключения и определяемые пользователем классы.


